{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red106\green152\blue85;\red0\green0\blue0;\red255\green255\blue255;
\red70\green137\blue204;\red140\green211\blue254;\red202\green202\blue202;\red212\green214\blue154;\red194\green126\blue101;
\red183\green111\blue179;\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c48627\c65098\c40784;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;
\cssrgb\c33725\c61176\c83922;\cssrgb\c61176\c86275\c99608;\cssrgb\c83137\c83137\c83137;\cssrgb\c86275\c86275\c66667;\cssrgb\c80784\c56863\c47059;
\cssrgb\c77255\c52549\c75294;\cssrgb\c70980\c80784\c65882;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Deliverables\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // when page loads, show first 50 Monsters with name, age and description\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // Above list, create form to add a new Monster.  There should be fields for name, age and description\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // and a 'Create Monster' button.  When the button is clicked, the new Monster will be added to the list\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // and saved to the database.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // At the end of the list, show a button (or two; forward and backward) to load the next 50 monsters and display them.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // 1. Create fetch() function and get initial list of Monster objects with fetch call.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //          fetchMonsters()\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // 2. Create renderMonster() function that creates 'cards' for each Monster object and display them\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //       in the DOM - INCLUDE the ID, but do not display it?\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //          renderMonsters() : name, age, description, id(not displayed)\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // 3. Create the fields and button to be used to add/create a new Monster object.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //          addNewMonster() - including the addEventListener() for the submit event?\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // 4. Create submit event to be used, then call the function to add/create a new Monster Object, \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //      and following that call, the function to add the new Monster to the database.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // 5. Create eventListeners() for the two buttons displayed at the bottom of the DOM (following the \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //      50 initial monsters) to toggle the page forward or backward, which then need to call the fetch function and the \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //      render function\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //          moveForwardOnePage() and moveBackwardOnePage()\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monsterHorde\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 loadedMessage\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 info\cf4 \strokec4 (\cf9 \strokec9 "DOM loaded"\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf10 \strokec10 if\cf4 \strokec4  (\cf6 \strokec6 document\cf4 \strokec4 .\cf6 \strokec6 readyState\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf9 \strokec9 "loading"\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 // Loading hasn't finished yet\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 document\cf4 \strokec4 .\cf8 \strokec8 addEventListener\cf4 \strokec4 (\cf9 \strokec9 "DOMContentLoaded"\cf4 \strokec4 , \cf8 \strokec8 fetchMonsters\cf4 \strokec4 ());\cb1 \
\cb3   \} \cf10 \strokec10 else\cf4 \strokec4  \{\cb1 \
\cb3     \cf2 \strokec2 // `DOMContentLoaded` has already fired\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 loadedMessage\cf4 \strokec4 ();\cb1 \
\cb3     \cf8 \strokec8 fetchMonsters\cf4 \strokec4 ();\cb1 \
\cb3   \};\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 async\cf4 \strokec4  \cf5 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 fetchMonsters\cf4 \strokec4 () \{\cb1 \
\cb3     \cf10 \strokec10 try\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 pageNo\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf11 \strokec11 1\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monstLimiter\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf11 \strokec11 50\cf4 \strokec4 ;\cb1 \
\
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 response\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 await\cf4 \strokec4  \cf8 \strokec8 fetch\cf4 \strokec4 (\cf9 \strokec9 `http://localhost:3000/monsters/?_limit=\cf5 \strokec5 $\{\cf6 \strokec6 monstLimiter\cf5 \strokec5 \}\cf9 \strokec9 &_page=\cf5 \strokec5 $\{\cf6 \strokec6 pageNo\cf5 \strokec5 \}\cf9 \strokec9 `\cf4 \strokec4 , \{\cb1 \
\cb3             \cf6 \strokec6 method:\cf4 \strokec4  \cf9 \strokec9 "GET"\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 headers:\cf4 \strokec4  \{\cb1 \
\cb3                 \cf9 \strokec9 "Content-Type"\cf6 \strokec6 :\cf4 \strokec4  \cf9 \strokec9 "application/json"\cf4 \strokec4  \cb1 \
\cb3             \}\cb1 \
\cb3         \});\cb1 \
\cb3         \cf6 \strokec6 monsterHorde\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 await\cf4 \strokec4  \cf6 \strokec6 response\cf4 \strokec4 .\cf8 \strokec8 json\cf4 \strokec4 ();\cb1 \
\cb3         \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 monsterHorde\cf4 \strokec4 );\cb1 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf6 \strokec6 monsterHorde\cf4 \strokec4 ;\cb1 \
\cb3     \} \cf10 \strokec10 catch\cf4 \strokec4  (\cf6 \strokec6 error\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 error\cf4 \strokec4 );\cb1 \
\cb3     \} \cf10 \strokec10 finally\cf4 \strokec4  \{\cb1 \
\cb3         (\cf6 \strokec6 monsterHorde\cf4 \strokec4 ) \cf5 \strokec5 =>\cf4 \strokec4  \{\cb1 \
\cb3             \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monstCont\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 document\cf4 \strokec4 .\cf8 \strokec8 querySelector\cf4 \strokec4 (\cf9 \strokec9 "#monster-container"\cf4 \strokec4 );\cb1 \
\cb3             \cf6 \strokec6 monstCont\cf4 \strokec4 .\cf6 \strokec6 innerHTML\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 "filth flarn filth "\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 debugger\cf4 \strokec4 ;\cb1 \
\cb3             \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 monstCont\cf4 \strokec4 .\cf6 \strokec6 innerHTML\cf4 \strokec4 );\cb1 \
\cb3             \cf10 \strokec10 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 sully\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf11 \strokec11 0\cf4 \strokec4 ; \cf6 \strokec6 sully\cf4 \strokec4  \cf7 \strokec7 <\cf4 \strokec4  \cf6 \strokec6 monsterHorde\cf4 \strokec4 .\cf6 \strokec6 length\cf4 \strokec4 ; \cf6 \strokec6 sully\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 monsterHorde\cf4 \strokec4 );\cb1 \
\cb3             \cf2 \strokec2 // renderMonsters(results[sully]);\cf4 \cb1 \strokec4 \
\cb3             \}\cb1 \
\cb3         \}\};\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf8 \strokec8 renderMonsters\cf4 \strokec4 (\cf6 \strokec6 results\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monstDiv\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 document\cf4 \strokec4 .\cf8 \strokec8 createElement\cf4 \strokec4 (\cf9 \strokec9 "div"\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monstName\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 document\cf4 \strokec4 .\cf8 \strokec8 createElement\cf4 \strokec4 (\cf9 \strokec9 "h3"\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monstAge\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 document\cf4 \strokec4 .\cf8 \strokec8 createElement\cf4 \strokec4 (\cf9 \strokec9 "h4"\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monstDescription\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 document\cf4 \strokec4 .\cf8 \strokec8 createElement\cf4 \strokec4 (\cf9 \strokec9 "p"\cf4 \strokec4 ); \cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf6 \strokec6 monstId\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 document\cf4 \strokec4 .\cf8 \strokec8 createElement\cf4 \strokec4 (\cf9 \strokec9 "p"\cf4 \strokec4 );\cb1 \
\
\
\cb3   \};\cb1 \
}